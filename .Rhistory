install.packages("testthat")
library(testthat)
destinyDirectory = "./data"
file.exists(destinyDirectory)
library(testthat)
context(Obtaining the data)
destinyDirectory = "./data"
test_that("passing .... then an error is thrown"),{
expect_error(object = file.exists(destinyDirectory))
}
test_that("passing .... then an error is thrown"){
expect_error(object = file.exists(destinyDirectory))
}
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data"
test_that("passing .... then an error is thrown"){
expect_error(object = file.exists(destinyDirectory))
}
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("passing .... then an error is thrown"){
expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
}
test_that("passing .... then an error is thrown"),{
expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
}
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
testthat::test_that("passing .... then an error is thrown"){
testthat::auto_test()expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
}
testthat::expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
testthat::test_that("passing .... then an error is thrown"){
testthat::expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
}
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
testthat::test_that("passing .... then an error is thrown"){
testthat::expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
}
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("passing .... then an error is thrown",{
expect_error(object = download.file(dataURL,destfile = destinyDirectory + destinyFile ))
})
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("passing .... then an error is thrown",{
expect_error(object = "./data/Coursera_swiftKey.zip" )
})
test_that("passing .... then an error is thrown",{
expect_match(object = destinyDirectory + destinyFile)
})
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("passing .... then an error is thrown",{
expect_error(object = "./data/Coursera_swiftKey.zip" )
})
test_that("passing .... then an error is thrown",{
expect_match(object = destinyDirectory + destinyFile, regexp = "./data/Coursera_swiftKey.zip")
})
createDestination <- function(destinyDirectory){
if (!file.exists(destinyDirectory)){
dir.create(destinyDirectory)
}
return !file.exists(destinyDirectory)
}
source('C:/Users/hongji/GitHub/Capstone/createDestination.R')
source('C:/Users/hongji/GitHub/Capstone/createDestination.R')
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("passing .... then an error is thrown",{
expect_equal(createDestination(destinyDirectory),TRUE)
})
test_that("passing .... then an error is thrown",{
expect_equal(createDestination(destinyDirectory),TRUE)
})
test_that("passing .... then an error is thrown",
{
expect_equal(createDestination(destinyDirectory),TRUE)
}
)
expect_true(createDestination(destinyDirectory))
test_that("Test the directory exists",
{
expect_true(createDestination(destinyDirectory))
}
)
auto_test(createDestination(destinyDirectory))
source('C:/Users/hongji/GitHub/Capstone/downloadData.R')
auto_test(downloadData(dataURL, destinyDirectory, destinyFile))
source('C:/Users/hongji/GitHub/Capstone/downloadData.R')
auto_test(createDestination(destinyDirectory))
auto_test(createDestination(destinyDirectory)),
auto_test(downloadData(dataURL, destinyDirectory, destinyFile))
source('C:/Users/hongji/GitHub/Capstone/downloadData.R')
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("Test the directory exists",
{
auto_test(createDestination(destinyDirectory))
auto_test(downloadData(dataURL, destinyDirectory, destinyFile))
}
)
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("Test the directory exists",
{
expect_true(createDestination(destinyDirectory))
expect_true(downloadData(dataURL, destinyDirectory, destinyFile))
}
)
source('C:/Users/hongji/GitHub/Capstone/downloadData.R')
library(testthat)
context("Obtaining the data")
destinyDirectory = "./data/"
destinyFile = "Coursera_SwiftKey.zip"
dataURL = "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
test_that("Test the directory exists",
{
expect_true(createDestination(destinyDirectory))
expect_true(downloadData(dataURL, destinyDirectory, destinyFile))
}
)
